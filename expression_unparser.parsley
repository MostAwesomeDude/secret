Lambda(@params @expr) = prec(15) --> lambda $params: $expr

kwarg = Pair(@k @v) --> $k=$v
param = kwarg | (@p -> p)
Parameters() -> ""
Parameters([param*:ps]) -> ', '.join(map(str, ps))
Parameters([param*:ps] @starkw)
    -> ', '.join(map(str, ps) + ["**" + str(starkw)])
Parameters([param*:ps] @star null)
    -> ', '.join(map(str, ps) + ["*" + str(star)])
Parameters([param*:ps] @star @starkw)
    -> ', '.join(ps + ["*" + str(star), "**" + str(starkw)])


IfExp(@cond @left @right) = prec(14) --> if $cond then $left else $right
Or(@left @right) = prec(13) --> $left or $right
And(@left @right) = prec(12) --> $left and $right
Not(@e) = prec(11) --> not $e
pair = Pair(cmpop:op @right) --> $op$right
cmpop = (Eq() -> " == "
      |  NotEq() -> " != "
      |  Lt() -> " < "
      |  LtE() -> " <= "
      |  Gt() -> " > "
      |  GtE() -> " >= "
      |  Is() -> " is "
      |  IsNot() -> " is not "
      |  In() -> " in "
      |  notin() -> " not in "
      )
Compare(@left [pair+:ps]) = prec(10) --> $left$ps

BitOr(@left @right) = prec(9) --> $left | $right
BitXor(@left @right) = prec(8) --> $left ^ $right
BitAnd(@left @right) = prec(7) --> $left & $right
LShift(@left @right) = prec(6) --> $left << $right
RShift(@left @right) = prec(6) --> $left >> $right

Add(@left @right) = prec(5) --> $left + $right
Sub(@left @right) = prec(5) --> $left - $right

Mul(@left @right) = prec(4) --> $left * $right
FloorDiv(@left @right) = prec(4) --> $left // $right
Div(@left @right) = prec(4) --> $left / $right
Mod(@left @right) = prec(4) --> $left % $right

Negate(@e) = prec(3) --> -$e
Invert(@e) = prec(3) --> ~$e

Pow(@left @right) = prec(2) --> $left ** $right

Attribute(@left @right) = prec(1) --> $left.$right
Subscript(@left @right) = prec(1) --> $left[$right]

Slice(@start @stop @step) (?(step == 1) --> $start:$stop
                          |             --> $start:$stop:$step
                          )

Call(@left null) = prec(1) --> $left()
Call(@left @right) = prec(1) --> $left($right)


star @expr --> *$expr
starkw @expr --> **$expr
Arguments(null null null starkw:starkw)
    -> starkw
Arguments(null null star:star null)
    -> star
Arguments(null [kwarg*:kwargs] null null)
    -> ', '.join(str(a) for a in kwargs)
Arguments(@pos null null null)
    -> ', '.join(str(a) for a in pos)
Arguments(@pos [kwarg*:kwargs] null null)
    -> ', '.join(str(a) for a in pos + kwargs)
Arguments(@pos [kwarg*:kwargs] null starkw:starkw)
    -> ', '.join(str(a) for a in pos + kwargs + [starkw])
Arguments(@pos null star:star null)
    -> ', '.join(str(a) for a in pos + [star])
Arguments(@pos [kwarg*:kwargs] star:star null)
    -> ', '.join(str(a) for a in pos + kwargs + [star])
Arguments(@pos null star:star starkw:starkw)
    -> ', '.join(str(a) for a in pos + [star, starkw])
Arguments(@pos [kwarg*:kwargs] star:star starkw:starkw)
    -> ', '.join(str(a) for a in pos + kwargs + [star, starkw])

Quasi(@prefix @contents) = prec(0) --> $prefix`$contents`
Name(@n) = prec(0) --> $n
Num(@i) = prec(0) --> $i
Str(@prefix @s) = prec(0) (?(prefix and 'u' in prefix) -> "u" + repr(s)
                  | -> repr(s))
Tuple(transform*:items) = prec(0) -> '(' + ', '.join(str(i) for i in items) + ')'

List(transform*:items) = prec(0) -> '[' + ', '.join(str(i) for i in items) + ']'

ListComp(@expr @tail) = prec(0) --> [$expr $tail]
Generator(@expr @tail) = prec(0) --> ($expr $tail)
#more listcomp/gencomp

dict_pair = Pair(@k @v) prec(0) --> $k: $v
dict_pairs = dict_pair*:ps -> ', '.join(str(p) for p in ps)
Dict(Comprehension(@k @v @tail)) = prec(0) --> {$k: $v $tail}
Dict(dict_pairs*:ps) = prec(0) --> {$ps}


Set(ListComp(@e @tail)) prec(0) --> {$e $tail}
Set(transform*:items) = prec(0) -> '{' + ', '.join(str(i) for i in items) + '}'
Yield(@e) prec(0) --> (yield $e)

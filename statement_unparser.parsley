unknown_term = PythonExpressionUnparser.transform:ex -> str(ex)

assign_lhs_part = (Attribute(assign_lhs_part:o @attr) --> $o.$attr
                  |Subscript(assign_lhs_part:o @sub) --> $o[$sub]
                  |Call(assign_lhs_part:o @args) --> $o($args)
                  |Name(@n) -> n
                  )
assign_lhs = Tuple(assign_lhs_part*:parts) -> ', '.join(parts)
multi_assign = assign_lhs+:lhs -> " = ".join(lhs)
#Assign([multi_assign:lhss] @rhs) --> $lhss = $rhs
Assign([assign_lhs_part:lhss] @rhs) --> $lhss = $rhs

AugAssign(@lhs @op @expr) --> $lhs $op $expr
Assert(@test null) --> assert $test
Assert(@test @reason) --> assert $test, $reason

Del(@target) --> del $target

Return(@expr) --> return $expr

Raise(null null null) --> raise
Raise(@expr null null) --> raise $expr
Raise(@typ @val null) --> raise $typ, $val
Raise(@typ @val @tb) --> raise $typ, $val, $tb

Break() --> break
Continue() --> continue
Pass() --> pass

namelist = [transform*:names] -> ", ".join(name)
Import(namelist:names) --> import $names
Import(namelist:names @rel) --> from $rel import $names
As(@m @n) --> $m as $n

Global(namelist:names) --> global $names
Exec(@expr null null) --> exec $expr
Exec(@expr @gs null) --> exec $expr in $gs
Exec(@expr @gs @ls) --> exec $expr in $gs, $ls

elifs = [] -> ""
elifs = elif+:es -> '\n'.join(es)

elif = [@ele @elthen] {{{
elif $ele:
    $elthen
}}}
If(@test @consq elifs:els null) {{{
if $test:
    $consq
$els
}}}
If(@test @consq [elifs*]:els @alt) {{{
if $test:
    $consq
$els
else:
    $alt
}}}

While(@expr @suite) {{{
while $expr:
    $suite
}}}

For(@targets @exprs @suite null) {{{
for $targets in $exprs:
    $suite
}}}

For(@targets @exprs @suite @els) {{{
for $targets in $exprs:
    $suite
else:
    $els
}}}

exc ExceptHandler(@typ null @s) {{{
except $typ:
    $s
}}}
exc ExceptHandler(@typ @val @s) {{{
except $typ as $val:
    $s
}}}
Try(@s exc*:excepts null null) {{{
try:
    $s
$excepts
}}}
Try(@s exc*:excepts @e null) {{{
try:
    $s
$excepts
else:
    $e
}}}
Try(@s exc*:excepts null @f) {{{
try:
    $s
$excepts
finally:
    $f
}}}
Try(@s exc*:excepts @e @f) {{{
try:
    $s
$excepts
else:
    $e
finally:
    $f
}}}
Try(@s @f) {{{
try:
    $s
finally:
    $f
}}}
Context(@expr @target) --> $expr as $target
With(@items @s) {{{
with $items:
    $s
}}}

Decorator(@name @args) --> @$name($args)
Decorated(@ds @f) {{{
$ds
$f
}}}
docstring_suite = [Str(@prefix @docstring) transform*:rest] -> [(prefix or '') + '"""\n' + repr(docstring)[1:-1].replace('\\"', '"').replace('"""', '\"\"\"') + '\n"""'] + rest
docstring_suite = @suite

Class(@name null docstring_suite:suite) {{{
class $name:
    $suite
}}}
Class(@name (@p | cls_parents:p) docstring_suite:suite) {{{
class $name($p):
    $suite
}}}
cls_parents Tuple(transform*:es) -> ", ".join(es)

Def(@name @params docstring_suite:suite) {{{
def $name($params):
    $suite
}}}



File([transform*:stmts]) {{{
$stmts
}}}
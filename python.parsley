# Omissions:
# * ``
# * <>

# Core primitives that will be needed later.
newline_ = '\r' '\n' | '\r' | '\n'
leading_space_ = ' '
newline = ?(not self.parens) newline_
leading_space = ?(self.parens) newline_ | leading_space_
# Carefully step around the possible {0} here.
indentation = ?(not self.indents) | !(sum(self.indents)):n leading_space{n}
indent = indentation leading_space+:ss !(self.indents.append(len(ss)))
dedent = !(self.indents.pop())

# Parentheses...
po = leading_space* '(' !(self.po())
pc = leading_space* ')' !(self.pc())

# ...curly braces...
co = leading_space* '{' !(self.po())
cc = leading_space* '}' !(self.pc())

# ...and square brackets.
so = leading_space* '[' !(self.po())
sc = leading_space* ']' !(self.pc())

# Thankfully, there are only a couple other bits of punctuation used in
# Python.
comma = leading_space* ','
colon = leading_space* ':'
semi = leading_space* ';'
dot = leading_space* '.'

# http://docs.python.org/reference/lexical_analysis.html

# 2.3
identifier_ = leading_space* (letter | '_'):first <letterOrDigit*>:second
              ?(not self.keyword_pred(first, second))
            -> first + second
identifier = identifier_:i -> t.Name(i)
letter = lowercase | uppercase
lowercase = anything:c ?(c in "abcdefghijklmnopqrstuvwxyz") -> c
uppercase = anything:c ?(c in "ABCDEFGHIJKLMNOPQRSTUVWXYZ") -> c
digit = anything:c ?(c in "0123456789") -> c

# 2.3.1
# XXX ugh, token() is not good here.
keyword :k = leading_space* token(k) ~letterOrDigit -> k

# 2.4.1
stringliteral = leading_space* stringprefix?:p (longstring | shortstring):s
              -> t.Str(p, s)
stringprefix = 'r' | 'u' | "ur" | 'R' | 'U' | "UR" | "Ur" | "uR" | 'b' | 'B'
             | "br" | "Br" | "bR" | "BR"
shortstring = shortstringsingle | shortstringdouble
shortstringsingle = '\'' <(escapeseq | ~'\'' ~'\n' anything)*>:s '\'' -> s
shortstringdouble = '"' <(escapeseq | ~'"' ~'\n' anything)*>:s '"' -> s
longstring = '\'' '\'' '\'' <longstringitem*>:s '\'' '\'' '\'' -> s
           | '"' '"' '"' <longstringitem*>:s '"' '"' '"' -> s
longstringitem = longstringchar | escapeseq
longstringchar = ~'\\'
escapeseq = '\\' anything

# 2.4.4
longinteger = integer:i ('l' | 'L') -> i
integer = leading_space*
          (octinteger | hexinteger | bininteger | decimalinteger):i
        -> t.Num(i)
decimalinteger = nonzerodigit:first <digit*>:second -> int(first + second)
               | '0' -> 0
octinteger = '0' ('o' | 'O') <octdigit+>:d -> int(d, 8)
           | '0' <octdigit+>:d -> int(d, 8)
hexinteger = '0' ('x' | 'X') <hexdigit+>:d -> int(d, 16)
bininteger = '0' ('b' | 'B') <bindigit+>:d -> int(d, 2)
nonzerodigit = '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9'
octdigit = '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7'
bindigit = '0' | '1'
hexdigit = digit | 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'A' | 'B' | 'C' | 'D'
         | 'E' | 'F'

# 2.4.5
floatnumber = pointfloat | exponentfloat
pointfloat = intpart? fraction | intpart '.'
exponentfloat = (intpart | pointfloat) exponent
intpart = digit+
fraction = '.' digit+
exponent = ('e' | 'E') ('+' | '-')? digit+

# 2.4.6
imagnumber = (floatnumber | intpart) ('j' | 'J')

# http://docs.python.org/reference/expressions.html

# 5.2
atom = identifier | literal | enclosure
enclosure = parenth_form | list_display | generator_expression | dict_display
          | set_display | yield_atom

# 5.2.2
literal = stringliteral | longinteger | integer | imagnumber | floatnumber

# 5.2.3
parenth_form = po expression_list?:e pc -> e if e else t.Tuple()

# 5.2.4, 5.2.5
# We generalize comprehensions entirely.
list_display = so expression_list?:l sc -> t.List(*l)
             | so list_comprehension:l sc -> l
list_comprehension = expression:e list_for:f -> l.ListComp(e, f)
comp_for = keyword("for") target_list:t keyword("in") expression_list:i
           list_iter?:f
         -> l.Comprehension(t, i, f)
comp_iter = comp_for | comp_if
comp_if = keyword("if") expression:e comp_iter?:f -> l.CompIf(e, f)

# 5.2.6
generator_expression = po expression:e comp_for:c pc -> t.Generator(e, c)

# 5.2.7
dict_display = co key_datum_list?:e cc -> t.Dict(*e) if e else t.Dict()
             | co dict_comprehension:e cc -> t.Dict(e)
key_datum_list = key_datum:head (comma key_datum)*:tail comma?
               -> [head] + tail
key_datum = expression:k colon expression:v -> t.Pair(k, v)
dict_comprehension = expression:k colon expression:v comp_for:c
                   -> t.Comprehension(k, v, c)

# 5.2.8
set_display = co (expression_list | list_comprehension):e cc -> t.Set(e)

# 5.2.10
yield_atom = po yield_expression:e pc -> e
yield_expression = keyword("yield") expression_list?:e -> t.Yield(e)

# 5.3
primary = atom:a (attributeref | slicing | subscription | call)*:trailers
        -> self.primary(a, trailers)
primary_nocall = atom:a (attributeref | slicing | subscription)*:trailers
        -> self.primary(a, trailers)

# 5.3.1
attributeref = dot identifier:i -> t.Attribute(None, i)

# 5.3.2
subscription = so expression_list:item sc -> t.Subscript(None, item)

# 5.3.3
slicing = so (short_slice | slice_list):s sc -> t.Subscript(None, s)
slice_list = slice_item:head (comma slice_item)*:tail comma?:t
           -> self.tuplify(head, tail, t)
slice_item = ellipsis | proper_slice | expression
proper_slice = long_slice | short_slice
short_slice = expression?:lower colon expression?:upper
            -> t.Slice(lower, upper, t.Num(1))
long_slice = short_slice:s colon expression?:stride -> t.Slice(s, stride)
ellipsis = dot '.' '.' -> t.Ellipsis()

# 5.3.4
call = po (argument_list:a comma? -> a
       | expression genexpr_for)?:args pc
     -> t.Call(None, args)
argument_list = positional_arguments:args
                (comma keyword_arguments)?:kwargs
                (comma token("*") expression)?:starargs
                (comma keyword_arguments)?:morekwargs
                (comma token("**") expression)?:starkwargs
                -> t.Arguments(args, self.argdicts(kwargs, morekwargs),
                               starargs, starkwargs)
              | keyword_arguments:kwargs
                (comma token("*") expression)?:starargs
                (comma token("**") expression)?:starkwargs
                -> t.Arguments(None, kwargs, starargs, starkwargs)
              | token("*") expression:starargs
                (comma token("*") expression)?:morestarargs
                (comma token("**") expression)?:starkwargs
                -> t.Arguments(starargs, None, morestarargs, starkwargs)
              | token("**") expression:kwargs
                -> t.Arguments(None, None, None, kwargs)
positional_arguments = expression:head (comma expression)*:tail
                     -> [head] + tail
keyword_arguments = keyword_item:head (comma keyword_item)*:tail
                  -> [head] + tail
keyword_item = identifier:k token("=") expression:v -> t.Pair(k, v)

# 5.4
power = (primary | atom):left (token("**") u_expr)?:right
      -> t.Pow(left, right) if right else left

# 5.5
u_expr = token("-") u_expr:e -> t.Negate(e)
       | token("+") u_expr
       | token("~") u_expr:e -> t.Invert(e)
       | power

# 5.6
m_expr = m_expr:left token("*") u_expr:right -> t.Mul(left, right)
       | m_expr:left token("//") u_expr:right -> t.FloorDiv(left, right)
       | m_expr:left token("/") u_expr:right -> t.Div(left, right)
       | m_expr:left token("%") u_expr:right -> t.Mod(left, right)
       | u_expr
a_expr = a_expr:left token("+") m_expr:right -> t.Add(left, right)
       | a_expr:left token("-") m_expr:right -> t.Sub(left, right)
       | m_expr

# 5.7
shift_expr = shift_expr:left token("<<") a_expr:right -> t.LShift(left, right)
           | shift_expr:left token(">>") a_expr:right -> t.RShift(left, right)
           | a_expr

# 5.8
and_expr = and_expr:left token("&") shift_expr:right -> t.BitAnd(left, right)
         | shift_expr
xor_expr = xor_expr:left token("^") and_expr:right -> t.BitXor(left, right)
         | and_expr
or_expr = or_expr:left token("|") xor_expr:right -> t.BitOr(left, right)
        | xor_expr

# 5.9
comparison = or_expr:left (cmpop:c or_expr:e -> t.Pair(c, e))+:right
           -> t.Compare(left, right)
           | or_expr
# Precedence: isnot must be matched before is.
cmpop = eq | noteq | lt | lte | gt | gte | isnot | is | in | notin
eq = token("==") -> t.Eq()
noteq = token("!=") -> t.NotEq()
lt = token("<") -> t.Lt()
lte = token("<=") -> t.LtE()
gt = token(">") -> t.Gt()
gte = token(">=") -> t.GtE()
is = keyword("is") -> t.Is()
isnot = keyword("is") keyword("not") -> t.IsNot()
in = keyword("in") -> t.In()
notin = keyword("not") keyword("in") -> t.NotIn()

# 5.10
or_test = or_test:left keyword("or") and_test:right
          -> t.Or(left, right)
        | and_test
and_test = and_test:left keyword("and") not_test:right
           -> t.And(left, right)
         | not_test
not_test = keyword("not") not_test:e -> t.Not(e)
         | comparison

# 5.11
conditional_expression = or_test:left keyword("if") or_test:cond
                         keyword("else") expression:right
                         -> t.IfExp(cond, left, right)
                       | or_test
expression = conditional_expression | lambda_form

# 5.12
lambda_form = keyword("lambda") parameter_list:p colon expression:e
            -> t.Lambda(p, e)

# 5.13
expression_list = expression:head (comma expression)*:tail comma?:t
                -> self.tuplify(head, tail, t)

# http://docs.python.org/reference/simple_stmts.html

# 6
# Due to the remarkable flexibility of expression syntax, they really should
# only be attempted at the very end of the list, after all other simple
# statements. Most of them start with keywords anyway.
simple_stmt = assert_stmt
            | pass_stmt
            | del_stmt
            | print_stmt
            | return_stmt
            | yield_stmt
            | raise_stmt
            | break_stmt
            | continue_stmt
            | import_stmt
            | global_stmt
            | exec_stmt
            | augmented_assignment_stmt
            | assignment_stmt
            | expression_stmt

# 6.1
expression_stmt = expression_list

# 6.2
assignment_stmt = (target_list:lhs token("=") -> lhs)+:lhss
                  (expression_list | yield_expression):rhs -> t.Assign(lhss, rhs)
target_list = target:head (comma target)*:tail comma?:t
            -> self.tuplify(head, tail, t)
target = identifier
       | po target_list:l pc -> l
       | so target_list:l sc -> l
       | attributeref
       | subscription
       | slicing

# 6.2.1
augmented_assignment_stmt = primary_nocall:p augop:op
                            (yield_expression | expression_list):expr
                          -> t.AugAssign(p, op, expr)
augop = token("+=") | token("-=") | token("*=") | token("/=") | token("//=")
      | token("%=") | token("**=") | token(">>=") | token("<<=") | token("&=")
      | token("^=") | token("|=")

# 6.3
assert_stmt = keyword("assert") expression:test (comma expression)?:reason
            -> t.Assert(test, reason)

# 6.4
pass_stmt = keyword("pass") -> t.Pass()

# 6.5
del_stmt = keyword("del") target_list:t -> t.Del(t)

# 6.6
# XXX ast
# XXX oh noes, do we even want this? :T
print_stmt = keyword("print")
             ((expression (comma expression)* comma?)
             | token(">>") expression (comma expression)+ comma?)

# 6.7
return_stmt = keyword("return") expression_list?:rv -> t.Return(rv)

# 6.8
yield_stmt = yield_expression

# 6.9
raise_stmt = keyword("raise")
             (expression:t
              (comma expression:v (comma expression:tb)?)?)?
           -> t.Raise(t, v, tb)

# 6.10
break_stmt = keyword("break") -> t.Break()

# 6.11
continue_stmt = keyword("continue") -> t.Continue()

# 6.12
# We don't have the "name" rule; it's only used immediately after the "as"
# keyword, so we instead have a single "as_name" rule which inlines "name".
# For posterity, this is "name":
# name = identifier
# ...Yeah, that's why.
import_stmt = keyword("import") module_as_name:head
              (comma module_as_name)*:tail -> t.Import([head] + tail)
            | keyword("from") relative_module:m keyword("import")
              identifier_as_name:head (comma identifier_as_name)*:tail
              -> t.Import([head] + tail, m)
            | keyword("from") relative_module:m keyword("import") po
              identifier_as_name:head (comma identifier_as_name)*:tail comma?
              pc -> t.Import([head] + tail, m)
module = (identifier_:i dot -> i)*:init identifier_:last
       -> t.Module(".".join(init + [last]))
module_as_name = module:m as_name?:n -> t.As(m, n)
identifier_as_name = identifier:i as_name?:n -> t.As(i, n)
relative_module = dot* module | dot+
as_name = keyword("as") identifier

# 6.12.1
# XXX ast
# XXX not hooked up? :T
future_statement = keyword("from") token("__future__") keyword("import")
                   identifier as_name? (comma identifier as_name?)*
                 | keyword("from") token("__future__") keyword("import") po
                   identifier as_name? (comma identifier as_name?)* comma? pc

# 6.13
# XXX ast
global_stmt = keyword("global") identifier (comma identifier)*

# 6.14
# XXX ast
exec_stmt = keyword("exec") or_expr
            (keyword("in") expression (comma expression)?)?

# http://docs.python.org/reference/compound_stmts.html

# 7
compound_stmt = if_stmt
              | while_stmt
              | for_stmt
              | try_stmt
              | with_stmt
              | funcdef
              | classdef
              | decorated
suite = newline indent statement:s suite_stmt*:ss dedent
        -> s + [x for l in ss for x in l]
      | stmt_list:ss newline -> ss
statement = compound_stmt:s -> [s]
          | stmt_list:ss newline -> ss
suite_stmt = indentation ~leading_space statement
stmt_list = simple_stmt:head (semi simple_stmt)*:tail semi? -> [head] + tail

# 7.1
if_stmt = keyword("if") expression:e colon suite:then
          (keyword("elif") expression:ele colon suite:elthen
           -> (ele, elthen))*:elifs
          (keyword("else") colon suite)?:elsethen
        -> t.If(e, then, elifs, elsethen)

# 7.2
while_stmt = keyword("while") expression:e colon suite:s -> t.While(e, s)

# 7.3
# XXX ast
for_stmt = keyword("for") target_list keyword("in") expression_list colon
           suite (keyword("else") colon suite)?

# 7.4
# XXX ast
try_stmt = try1_stmt | try2_stmt
try1_stmt = keyword("try") colon suite
            (keyword("except")
             (expression ((keyword("as") | comma) target)?)? colon suite)+
            (keyword("else") colon suite)?
            (keyword("finally") colon suite)?
try2_stmt = keyword("try") colon suite keyword("finally") colon suite

# 7.5
# XXX ast
with_stmt = keyword("with") with_item (comma with_item)* colon suite
with_item = expression (keyword("as") target)?

# 7.6
# XXX ast
decorated = decorators (classdef | funcdef)
decorators = decorator+
decorator = token("@") dotted_name
            (po (argument_list comma?)? pc)? newline
funcdef = keyword("def") identifier:name po parameter_list:ps pc colon
          suite:ss -> t.Def(name, ps, ss)
dotted_name = identifier:head (dot identifier)*:tail
            -> t.Name(".".join(head, *tail) if tail else head)
parameter_list = (defparameter:p comma -> p)*:init
                 (token("*") identifier:args
                  (comma token("**") identifier)?:kwargs
                -> t.Parameters(init, args, kwargs)
                | token("**") identifier:kwargs
                -> t.Parameters(init, None, kwargs)
                | defparameter:last comma?
                -> t.Parameters(init + [last], None, None))
               | -> t.Parameters(None, None, None)
defparameter = parameter:p token("=") expression:e -> t.Pair(p, e)
             | parameter
sublist = parameter (comma parameter)* comma?
parameter = identifier | po sublist pc

# 7.7
# XXX ast
classdef = keyword("class") identifier inheritance? colon suite
inheritance = po expression_list? pc

# http://docs.python.org/reference/toplevel_components.html

# 8.2
file_input = (newline | statement)*

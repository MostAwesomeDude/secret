comment = '#' (~'\n' anything)*
hspace = ' ' | '\t' | comment
vspace = token("\r\n") | '\r' | '\n'
emptyline = hspace* vspace
indentation = emptyline* hspace+
noindentation = emptyline* ~~~hspace

number = spaces !(self.startSpan()):s
               ('-' barenumber:x -> t.Exactly(-x, span=self.span(s))
                    |barenumber:x -> t.Exactly(x, span=self.span(s)))
barenumber = '0' (('x'|'X') <hexdigit+>:hs -> int(hs, 16)
                    |<octaldigit+>:ds -> int(ds, 8))
               |<digit+>:ds -> int(ds)
octaldigit = :x ?(x in '01234567' ) -> x
hexdigit = :x ?(x in '0123456789ABCDEFabcdef') -> x

escapedChar = '\\' ('n' -> "\n"
                     |'r' -> "\r"
                     |'t' -> "\t"
                     |'b' -> "\b"
                     |'f' -> "\f"
                     |'"' -> '"'
                     |'\'' -> "'"
                     |'\\' -> "\\")

character = !(self.startSpan()):s token("'") (escapedChar | anything):c
            token("'") -> t.Exactly(c, span=self.span(s))

string = !(self.startSpan()):s token('"') (escapedChar | ~('"') anything)*:c
         token('"') -> t.Exactly(''.join(c), span=self.span(s))

name = <letter letterOrDigit*>

application = indentation? !(self.startSpan()):s name:name
                  ('(' !(self.applicationArgs(finalChar=')')):args ')'
                    -> t.Apply(name, self.rulename, args, span=self.span(s))
                  | -> t.Apply(name, self.rulename, [], span=self.span(s)))

expr1 = application
          |ruleValue
          |semanticPredicate
          |semanticAction
          |number
          |character
          |string
          |token('(') expr:e token(')') -> e
          |!(self.startSpan()):s token('<') expr:e token('>')
             -> t.ConsumedBy(e, s=self.span(s))
          |!(self.startSpan()):s token('[') expr:e token(']')
             -> t.List(e, s=self.span(s))

expr2 = !(self.startSpan()):s (token('~') (token('~') expr2:e
                                           -> t.Lookahead(e, span=self.span(s))
                       |expr2:e -> t.Not(e, span=self.span(s))
          )
          |expr1)

repeatTimes = (barenumber:x -> int(x)) | name

expr3 = !(self.startSpan()):s (expr2:e
                      ('*' -> t.Many(e, span=self.span(s))
                      |'+' -> t.Many1(e, span=self.span(s))
                      |'?' -> t.Optional(e, span=self.span(s))
                      |'{' spaces repeatTimes:start spaces (
                      (',' spaces repeatTimes:end spaces '}'
                           -> t.Repeat(start, end, e, span=self.span(s)))
                         | spaces '}'
                           -> t.Repeat(start, start, e, span=self.span(s)))
                      | -> e
)):r
           (':' name:n -> t.Bind(n, r, span=self.span(s))
           | -> r)
          |token(':') name:n
           -> t.Bind(n, t.Apply("anything", self.rulename, []),
                     span=self.span(s))

expr4 = !(self.startSpan()):s expr3*:es -> t.And(es, span=self.span(s))

expr = !(self.startSpan()):s expr4:e (token('|') expr4)*:es
          -> t.Or([e] + es, span=self.span(s))

ruleValue = !(self.startSpan()):s token("->")
             -> self.ruleValueExpr(True, span=self.span(s))

semanticPredicate = !(self.startSpan()):s token("?(")
                    -> self.semanticPredicateExpr(span=self.span(s))

semanticAction = !(self.startSpan()):s token("!(")
                    -> self.semanticActionExpr(span=self.span(s))

ruleEnd = (hspace* vspace+) | end

rulePart :requiredName = noindentation name:n ?(n == requiredName)
                            !(setattr(self, "rulename", n))
                            expr4:args
                            (token("=") expr:e ruleEnd
                               -> t.And([args, e])
                            | ruleEnd -> args)

rule = noindentation ~~(name:n) !(self.startSpan()):s rulePart(n):r
          (rulePart(n)+:rs -> t.Rule(n, t.Or([r] + rs), span=self.span(s))
          |                -> t.Rule(n, r, span=self.span(s)))

# The "grammar" keyword and suite.
# grammar Ones:
#  ones = '1'+
grammar_stmt = keyword("grammar") identifier_:name colon rule_suite:s
             -> t.Grammar(name, s)
rule_suite = newline indent rule:r rule_stmt*:rs dedent -> r + rs
rule_stmt = indentation ~leading_space rule

# Override compound_stmt from the parent grammar to get grammar_stmt into the
# list of valid compound statements.
compound_stmt = grammar_stmt
              | if_stmt
              | while_stmt
              | for_stmt
              | try_stmt
              | with_stmt
              | funcdef
              | classdef
              | decorated
